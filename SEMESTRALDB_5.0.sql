--==================================================================================--
--==================================================================================--
--============================= S E M E S T R A L ==================================--
--==================================================================================--
--==================================================================================--

CREATE DATABASE 
SEMESTRAL
GO

USE 
SEMESTRAL
GO

BEGIN TRY
CREATE TABLE SUCURSAL (
  ID_SUCURSAL VARCHAR(5) NOT NULL,
  NOMBRE VARCHAR(25) NOT NULL,
  CIUDAD VARCHAR(25) NOT NULL,
  TELEFONO VARCHAR(25) NOT NULL,
  CONSTRAINT PK_ID_SUCURSAL PRIMARY KEY(ID_SUCURSAL),
  CONSTRAINT UQ_SUC_TELEFONO UNIQUE(TELEFONO)
);

CREATE TABLE DEPARTAMENTO (
  ID_DEPART VARCHAR(5) NOT NULL,
  NOM_DEP VARCHAR(25) NOT NULL,
  CONSTRAINT PK_ID_DEPART PRIMARY KEY(ID_DEPART)
);

CREATE TABLE EMPLEADO (
  ID_EMPLEADO VARCHAR(20) NOT NULL,
  NOMBRE VARCHAR(25) NOT NULL,
  APELLIDO VARCHAR(25) NOT NULL,
  TELEFONO VARCHAR(15) NOT NULL,
  CORREO VARCHAR(30) NOT NULL,
  SEXO VARCHAR(20) NULL CONSTRAINT DF_SEXO DEFAULT('INDEFINIDO'),
  FEC_NAC DATE NOT NULL,
  TRABAJO VARCHAR(20) NOT NULL,
  SALARIO MONEY NOT NULL,
  INI_CONTRATO DATE NOT NULL,
  FIN_CONTRATO DATE NOT NULL,
  ID_DEPART VARCHAR(5) NOT NULL,
  ID_SUCURSAL VARCHAR(5) NOT NULL,
  CONSTRAINT PK_ID_EMPLEADO PRIMARY KEY(ID_EMPLEADO),
  CONSTRAINT UQ_EMP_TELEFONO UNIQUE(TELEFONO),
  CONSTRAINT UQ_EMP_CORREO UNIQUE(CORREO),
  CONSTRAINT CK_SEXO CHECK(UPPER(SEXO)='MASCULINO' OR UPPER(SEXO)='FEMENINO' OR UPPER(SEXO)='INDEFINIDO'),
  CONSTRAINT FK_ID_DEPART FOREIGN KEY(ID_DEPART) REFERENCES DEPARTAMENTO(ID_DEPART),
  CONSTRAINT FK_EMP_SUC FOREIGN KEY(ID_SUCURSAL) REFERENCES SUCURSAL(ID_SUCURSAL)
);

CREATE TABLE CLIENTE (
  ID_CLIENTE VARCHAR(20) NOT NULL,
  NOMBRE VARCHAR(25) NOT NULL,
  APELLIDO VARCHAR(25) NOT NULL,
  CORREO VARCHAR(30) NOT NULL,
  TELEFONO VARCHAR(15) NOT NULL,
  FEC_NAC DATE NOT NULL,
  CONSTRAINT PK_ID_CLIENTE PRIMARY KEY(ID_CLIENTE),
  CONSTRAINT UQ_CLI_CORREO UNIQUE(CORREO),
  CONSTRAINT UQ_CLI_TELEFONO UNIQUE(TELEFONO)
);

CREATE TABLE PROOVEDOR (
  ID_PROOVEDOR VARCHAR(5) NOT NULL,
  NOMBRE VARCHAR(25) NOT NULL,
  TELEFONO VARCHAR(15) NOT NULL,
  CORREO VARCHAR(30) NOT NULL,
  DIRECCION VARCHAR(100) NOT NULL,
  CONSTRAINT PK_ID_PROVEEDOR PRIMARY KEY(ID_PROOVEDOR),
  CONSTRAINT UQ_PRO_TELEFONO UNIQUE(TELEFONO),
  CONSTRAINT UQ_PRO_CORREO UNIQUE(CORREO)
);

CREATE TABLE PRODUCTO_ALBROOK (
  ID_PRODUCTO VARCHAR(5) NOT NULL,
  NOMBRE VARCHAR(25) NOT NULL,
  MARCA VARCHAR(30) NOT NULL,
  DESCRIPCION VARCHAR(30) NOT NULL,
  PRECIO MONEY NOT NULL,
  CANTIDAD INT NOT NULL,
  ID_PROOVEDOR VARCHAR(5) NOT NULL,
  CONSTRAINT PK_ID_PRODUCTO_ALB PRIMARY KEY(ID_PRODUCTO),
  CONSTRAINT FK_ID_PROOVEDOR_ALB FOREIGN KEY(ID_PROOVEDOR) REFERENCES PROOVEDOR(ID_PROOVEDOR)
);

CREATE TABLE PRODUCTO_WESTLAND (
  ID_PRODUCTO VARCHAR(5) NOT NULL,
  NOMBRE VARCHAR(25) NOT NULL,
  MARCA VARCHAR(30) NOT NULL,
  DESCRIPCION VARCHAR(30) NOT NULL,
  PRECIO MONEY NOT NULL,
  CANTIDAD INT NOT NULL,
  ID_PROOVEDOR VARCHAR(5) NOT NULL,
  CONSTRAINT PK_ID_PRODUCTO_WES PRIMARY KEY(ID_PRODUCTO),
  CONSTRAINT FK_ID_PROOVEDOR_WES FOREIGN KEY(ID_PROOVEDOR) REFERENCES PROOVEDOR(ID_PROOVEDOR)
);

CREATE TABLE VENTA_ALBROOK (
  ID_VENTA VARCHAR(5) NOT NULL,
  NUM_FAC VARCHAR(6) NOT NULL,
  ID_CLIENTE VARCHAR(20) NOT NULL,
  MET_PAGO VARCHAR(20) NOT NULL,
  CANTIDAD INT NOT NULL,
  ID_EMPLEADO VARCHAR(20) NOT NULL,
  ID_SUCURSAL VARCHAR(5) NOT NULL,
  ID_PRODUCTO VARCHAR(5) NOT NULL,
  FECHA_VENTA SMALLDATETIME CONSTRAINT DF_FECHA_VENTA_ALB DEFAULT(GETDATE()),
  CONSTRAINT UQ_FACTURA_VENTA_ALBROOK UNIQUE(NUM_FAC),
  CONSTRAINT CK_METPAGO_VENTA_ALBROOK CHECK(UPPER(MET_PAGO) IN('EFECTIVO', 'TARJETA DE CRÉDITO')),
  CONSTRAINT PK_ID_VENTA_ALB PRIMARY KEY(ID_VENTA),
  CONSTRAINT FK_ID_CLIENTE_ALB FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
  CONSTRAINT FK_ID_EMPLEADO_ALB FOREIGN KEY(ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO),
  CONSTRAINT FK_ID_SUCURSAL_ALB FOREIGN KEY(ID_SUCURSAL) REFERENCES SUCURSAL(ID_SUCURSAL),
  CONSTRAINT FK_ID_PRODUCTO_ALB FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTO_ALBROOK(ID_PRODUCTO)
);

CREATE TABLE VENTA_WESTLAND (
  ID_VENTA VARCHAR(5) NOT NULL,
  NUM_FAC VARCHAR(6) NOT NULL,
  ID_CLIENTE VARCHAR(20) NOT NULL,
  MET_PAGO VARCHAR(20) NOT NULL,
  CANTIDAD INT NOT NULL,
  ID_EMPLEADO VARCHAR(20) NOT NULL,
  ID_SUCURSAL VARCHAR(5) NOT NULL,
  ID_PRODUCTO VARCHAR(5) NOT NULL,
  FECHA_VENTA SMALLDATETIME CONSTRAINT DF_FECHA_VENTA_WES DEFAULT(GETDATE())
  CONSTRAINT UQ_FACTURA_VENTA_WESTLAND UNIQUE(NUM_FAC),
  CONSTRAINT CK_METPAGO_VENTA_WESTLAND CHECK(UPPER(MET_PAGO) IN('EFECTIVO', 'TARJETA DE CRÉDITO')),
  CONSTRAINT PK_ID_VENTA_WES PRIMARY KEY(ID_VENTA),
  CONSTRAINT FK_ID_CLIENTE_WES FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
  CONSTRAINT FK_ID_EMPLEADO_WES FOREIGN KEY(ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO),
  CONSTRAINT FK_ID_SUCURSAL_WES FOREIGN KEY(ID_SUCURSAL) REFERENCES SUCURSAL(ID_SUCURSAL),
  CONSTRAINT FK_ID_PRODUCTO_WES FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTO_WESTLAND(ID_PRODUCTO)
);


--=============== TABLAS PARA IMPLEMENTAR TRIGGERS ===============--

CREATE TABLE CLIENTE_ELIMINADO (
  ID_CLIENTE VARCHAR(20) NOT NULL,
  NOMBRE VARCHAR(25) NOT NULL,
  APELLIDO VARCHAR(25) NOT NULL,
  CORREO VARCHAR(30) NOT NULL,
  TELEFONO VARCHAR(15) NOT NULL,
  FEC_NAC DATE NOT NULL,
  FECHA_ELIMINACION DATETIME,
  CONSTRAINT PK_ID_CLI_ELIMINADO PRIMARY KEY(ID_CLIENTE),
  CONSTRAINT UQ_CORREO_CLI UNIQUE(CORREO),
  CONSTRAINT UQ_TELEFONO_CLI UNIQUE(TELEFONO)
);

CREATE TABLE DELETE_VENTA_ALBROOK(
  ID_VENTA VARCHAR(5) NOT NULL,
  NUM_FAC VARCHAR(6) NOT NULL,
  ID_CLIENTE VARCHAR(20) NOT NULL,
  MET_PAGO VARCHAR(20) NOT NULL,
  CANTIDAD INT NOT NULL,
  ID_EMPLEADO VARCHAR(20) NOT NULL,
  ID_SUCURSAL VARCHAR(5) NOT NULL,
  ID_PRODUCTO VARCHAR(5) NOT NULL,
  FECHA_VENTA DATE NOT NULL,
  FECHA_REGISTRO DATETIME NOT NULL,
  CONSTRAINT UQ_FACTURA_DELETE_VENTA_ALBROOK UNIQUE(NUM_FAC),
  CONSTRAINT CK_METPAGO_DELETE_VENTA_ALBROOK CHECK(MET_PAGO IN('EFECTIVO', 'TARJETA DE CRÉDITO')),
  CONSTRAINT PK_ID_VENTA_DELETE_VENTA_ALBROOK PRIMARY KEY(ID_VENTA),
  CONSTRAINT FK_ID_CLIENTE_DELETE_VENTA_ALBROOK FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
  CONSTRAINT FK_ID_EMPLEADO_DELETE_VENTA_ALBROOK FOREIGN KEY(ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO),
  CONSTRAINT FK_ID_PRODUCTO_DELETE_VENTA_ALBROOK FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTO_ALBROOK(ID_PRODUCTO)
);

CREATE TABLE INSERT_VENTA_ALBROOK(
  ID_VENTA VARCHAR(5) NOT NULL,
  NUM_FAC VARCHAR(6) NOT NULL,
  ID_CLIENTE VARCHAR(20) NOT NULL,
  MET_PAGO VARCHAR(20) NOT NULL,
  CANTIDAD INT NOT NULL,
  ID_EMPLEADO VARCHAR(20) NOT NULL,
  ID_SUCURSAL VARCHAR(5) NOT NULL,
  ID_PRODUCTO VARCHAR(5) NOT NULL,
  FECHA_VENTA DATE NOT NULL,
  FECHA_REGISTRO DATE NOT NULL,
  CONSTRAINT UQ_FACTURA_INSERT_VENTA_ALBROOK UNIQUE(NUM_FAC),
  CONSTRAINT CK_METPAGO_INSERT_VENTA_ALBROOK CHECK(MET_PAGO IN('EFECTIVO', 'TARJETA DE CRÉDITO')),
  CONSTRAINT PK_ID_VENTA_INSERT_VENTA_ALBROOK PRIMARY KEY(ID_VENTA),
  CONSTRAINT FK_ID_CLIENTE_INSERT_VENTA_ALBROOK FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
  CONSTRAINT FK_ID_EMPLEADO_INSERT_VENTA_ALBROOK FOREIGN KEY(ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO),
  CONSTRAINT FK_ID_PRODUCTO_INSERT_VENTA_ALBROOK FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTO_ALBROOK(ID_PRODUCTO)
);

CREATE TABLE UPDATE_VENTA_ALBROOK(
  ID_VENTA VARCHAR(5) NOT NULL,
  NUM_FAC VARCHAR(6) NOT NULL,
  ID_CLIENTE VARCHAR(20) NOT NULL,
  MET_PAGO VARCHAR(20) NOT NULL,
  CANTIDAD INT NOT NULL,
  ID_EMPLEADO VARCHAR(20) NOT NULL,
  ID_SUCURSAL VARCHAR(5) NOT NULL,
  ID_PRODUCTO VARCHAR(5) NOT NULL,
  FECHA_VENTA DATE NOT NULL,
  FECHA_REGISTRO DATE NOT NULL,
  CONSTRAINT UQ_NUM_FAC_UPDATE_VENTA_ALBROOK UNIQUE(NUM_FAC),
  CONSTRAINT CK_METPAGO_UPDATE_VENTA_ALBROOK CHECK(MET_PAGO IN('EFECTIVO', 'TARJETA DE CRÉDITO')),
  CONSTRAINT PK_ID_VENTA_UPDATE_VENTA_ALBROOK PRIMARY KEY(ID_VENTA),
  CONSTRAINT FK_ID_CLIENTE_UPDATE_VENTA_ALBROOK FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
  CONSTRAINT FK_ID_EMPLEADO_UPDATE_VENTA_ALBROOK FOREIGN KEY(ID_EMPLEADO) REFERENCES EMPLEADO(ID_EMPLEADO),
  CONSTRAINT FK_ID_PRODUCTO_UPDATE_VENTA_ALBROOK FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTO_ALBROOK(ID_PRODUCTO)
);


--=============== TABLAS PARA IMPLEMENTAR CURSOR ===============--

CREATE TABLE PROOVEDOR_RESPALDO (
  ID_PROOVEDOR VARCHAR(5) NOT NULL,
  NOMBRE VARCHAR(25) NOT NULL,
  TELEFONO VARCHAR(15) NOT NULL,
  CORREO VARCHAR(30) NOT NULL,
  DIRECCION VARCHAR(100) NOT NULL,
  FECHA_REGISTRO DATETIME CONSTRAINT FECHA_PROOVEDOR_RESPALDO DEFAULT(GETDATE()),
  CONSTRAINT PK_ID_PROVEEDOR_RESPALDO PRIMARY KEY(ID_PROOVEDOR),
  CONSTRAINT UQ_PRO_RESPALDO_TELEFONO UNIQUE(TELEFONO),
  CONSTRAINT UQ_PRO__RESPALDO_CORREO UNIQUE(CORREO)
);

END TRY

BEGIN CATCH
	PRINT('================================================================================')
	PRINT('                            ERROR AL CREAR LAS TABLAS                           ')
	PRINT('================================================================================')
	PRINT('                                                                                ')
	PRINT('ERROR: ') + ERROR_MESSAGE();
END CATCH



--=========================================================== INSERCIÓN DE INFOMRACIÓN =================================================================

INSERT INTO SUCURSAL (ID_SUCURSAL, NOMBRE, CIUDAD, TELEFONO)
VALUES('S0001', 'ALBROOK', 'PANAMÁ', '234-4332'),
('S0002', 'WESTLAND', 'CHORRERA', '235-0132')

INSERT INTO DEPARTAMENTO (ID_DEPART, NOM_DEP)
VALUES('D0001', 'Contabilidad'),
('D0002', 'Ventas'),
('D0003', 'Aseo'),
('D0004', 'Informática'),
('D0005', 'Seguridad')

INSERT INTO EMPLEADO (ID_EMPLEADO, NOMBRE, APELLIDO, TELEFONO, CORREO, SEXO, FEC_NAC, TRABAJO, SALARIO, INI_CONTRATO, FIN_CONTRATO, ID_DEPART, ID_SUCURSAL) 
VALUES('6-778-914', 'Emi', 'Hemphrey', '6103-0889', 'mhemphrey0@wiley.com', 'FEMENINO', '1979-06-21', 'supervisora', 1000.00, '2021-05-27', '2023-01-17', 'D0001', 'S0001'),
('2-760-873', 'Mike', 'Fears', '6612-5494', 'vfears1@berkeley.edu', 'MASCULINO', '1998-12-07', 'cobros', 600.00, '2021-05-27', '2023-01-17', 'D0002', 'S0001'),
('3-968-925', 'Adrian', 'Corbould', '6431-3526', 'scorbould2@desdev.cn', 'MASCULINO', '1982-10-22', 'aseo', 300.00, '2021-05-27', '2023-01-17', 'D0003', 'S0001'),
('9-569-762', 'Esmeralda', 'Baynon', '6290-4859', 'ibaynon3@virginia.edu', 'FEMENINO', '1982-10-10', 'programadora', 1200.00, '2021-05-27', '2023-01-17', 'D0004', 'S0002'),
('6-862-264', 'Edithe', 'Tibald', '6304-3034', 'jtibald4@webnode.com', 'FEMENINO', '1975-01-23', 'cobros', 600.00, '2021-05-27', '2023-01-17', 'D0005', 'S0002')

INSERT INTO CLIENTE (ID_CLIENTE, NOMBRE, APELLIDO, CORREO, TELEFONO, FEC_NAC) 
VALUES('8-861-264', 'Lawry', 'Perree', 'lperree0@meetup.com', '6958-2264', '1961-04-04'),
('1-618-025', 'Freddie', 'Purdy', 'fpurdy1@typepad.com', '6899-5565', '1972-10-29'),
('10-658-014', 'Martie', 'Badman', 'mbadman2@amazon.com', '6603-8868', '1957-02-13'),
('2-060-879', 'Inna', 'Nesbeth', 'inesbeth3@over-blog.com', '6947-9143', '1993-12-23'),
('9-566-761', 'Mignonne', 'Goade', 'mgoade4@ed.gov', '6657-4625', '1994-03-24')

INSERT INTO PROOVEDOR (ID_PROOVEDOR, NOMBRE, TELEFONO, CORREO, DIRECCION) 
VALUES('PR001', 'Nisato', '6069-8992', 'microsoft@gmail.com', 'Torre ADR, Piso 8, Avenida Samuel Lewis'),
('PR002', 'Samsung', '6860-8598', 'samsung@gmail.com', 'la loceria calle 5 local 299'),
('PR003', 'Hisense', '6971-4886', 'intel@gmail.com', 'La Gloria, Bethania, cl 19cN, ca 37'),
('PR004', 'Sankey', '6222-9103', 'lenovo@gamil.com', 'Plaza Camino de Cruces El Dorado, PB L#30'),
('PR005', 'Sony', '6858-9386', 'msi@gmail.com', 'San francisco calle 70 edificio taimati')

INSERT INTO PRODUCTO_ALBROOK (ID_PRODUCTO, NOMBRE, MARCA, DESCRIPCION, PRECIO, CANTIDAD, ID_PROOVEDOR) 
VALUES('P0001', 'Televisor', 'Nisato', '55"', 495.50, 1, 'PR001'),
('P0002', 'Televisor', 'Samsung', '32"', 209.05, 5, 'PR002'),
('P0003', 'Televisor', 'Hisense', '65"', 509.95, 3, 'PR003'),
('P0004', 'Televisor', 'Sankey', '55"', 439.95, 4, 'PR004'),
('P0005', 'Televisor', 'Sony', '75"', 979.95, 3, 'PR005')

INSERT INTO PRODUCTO_WESTLAND (ID_PRODUCTO, NOMBRE, MARCA, DESCRIPCION, PRECIO, CANTIDAD, ID_PROOVEDOR) 
VALUES('P0001', 'Celular', 'Samsung', 'Galaxy A50"', 195.50, 1, 'PR002'),
('P0002', 'Celular', 'Samsung', 'Galaxy A10', 129.05, 5, 'PR002'),
('P0003', 'Televidor', 'Hisense', '65"', 509.95, 3, 'PR003'),
('P0004', 'Abaníco', 'Sankey', '14"', 17.95, 4, 'PR004'),
('P0005', 'Monitor', 'Sony', '27"', 279.95, 3, 'PR005')

INSERT INTO VENTA_ALBROOK (ID_VENTA, NUM_FAC, ID_CLIENTE, MET_PAGO, CANTIDAD, ID_EMPLEADO, ID_SUCURSAL, ID_PRODUCTO, FECHA_VENTA) 
VALUES('V0001', 'F0001', '8-861-264', 'Efectivo', '1', '2-760-873', 'S0001', 'P0001', '12/14/2020'),
('V0002', 'F0002', '1-618-025', 'Tarjeta de crédito', '2', '2-760-873', 'S0001', 'P0002', '5/13/2021'),
('V0003', 'F0003', '10-658-014', 'Efectivo', '1', '2-760-873', 'S0001', 'P0003', '12/18/2020'),
('V0004', 'F0004', '2-060-879', 'Tarjeta de crédito', '1', '2-760-873', 'S0001', 'P0004', '11/29/2021'),
('V0005', 'F0005', '9-566-761', 'Efectivo', '1', '2-760-873', 'S0001', 'P0005', '12/26/2020')

INSERT INTO VENTA_WESTLAND (ID_VENTA, NUM_FAC, ID_CLIENTE, MET_PAGO, CANTIDAD, ID_EMPLEADO, ID_SUCURSAL, ID_PRODUCTO, FECHA_VENTA) 
VALUES('V0001', 'F0001', '8-861-264', 'Efectivo', '1', '2-760-873', 'S0002', 'P0004', '12/14/2020'),
('V0002', 'F0002', '1-618-025', 'Tarjeta de crédito', '2', '2-760-873', 'S0002', 'P0004', '5/13/2021'),
('V0003', 'F0003', '10-658-014', 'Efectivo', '1', '2-760-873', 'S0002', 'P0004', '12/18/2020'),
('V0004', 'F0004', '2-060-879', 'Tarjeta de crédito', '1', '2-760-873', 'S0002', 'P0004', '11/29/2021'),
('V0005', 'F0005', '9-566-761', 'Efectivo', '1', '2-760-873', 'S0002', 'P0004', '12/26/2020')




--=================================================================================================================================================================

--================================================================== CONSULTAS ==================================================================================--

/*Realizar 15 consultas empleando funciones y demás dadas en clases, que apoyen a la toma de decisiones de la empresa.*/

/*
SELECT * FROM SUCURSAL
SELECT * FROM DEPARTAMENTO
SELECT * FROM EMPLEADO
SELECT * FROM CLIENTE
SELECT * FROM PROOVEDOR
SELECT * FROM PRODUCTO_ALBROOK
SELECT * FROM PRODUCTO_WESTLAND
SELECT * FROM VENTA_ALBROOK
SELECT * FROM VENTA_ALBROOK_PAPELERA
SELECT * FROM VENTA_WESTLAND 
*/

--1. ¿Qué trabajo realiza cada empleado y en qué sucural?.

/*SELECT ID_EMPLEADO, EMPLEADO.NOMBRE, TRABAJO, SUCURSAL.NOMBRE AS 'SUCURSAL' FROM EMPLEADO, SUCURSAL WHERE 
EMPLEADO.ID_SUCURSAL=SUCURSAL.ID_SUCURSAL*/


--2. Proyectar a los empleados que cobren más de 400 dólares y ordenar el salario de forma ascendente.

/*SELECT ID_EMPLEADO, NOMBRE, SALARIO FROM EMPLEADO WHERE SALARIO>'400' ORDER BY SALARIO ASC*/


--3. Seleccionar a los empleados que cumplen en los 6 primeros meses del año.

--SELECT ID_EMPLEADO, NOMBRE, FEC_NAC FROM EMPLEADO WHERE MONTH(FEC_NAC) IN(01,02,03,04,05,06) ORDER BY FEC_NAC ASC


/*4. Hacer una consulta que visualice el nombre más el apellido en una columna llamada NOMBRE COMPLETO, el correo 
electrónico y el número de teléfono de los clientes.*/

--SELECT CONCAT(NOMBRE,' ',APELLIDO) AS 'NOMBRE_COMPLETO', CORREO, TELEFONO FROM CLIENTE


--5. Seleccionar el id y el apellido de los clientes que hayan comprado en Westland Mall, sin filas repetidas.

/*SELECT DISTINCT VENTA_WESTLAND.ID_CLIENTE, APELLIDO AS 'APELLIDO' FROM CLIENTE, VENTA_WESTLAND WHERE
CLIENTE.ID_CLIENTE=VENTA_WESTLAND.ID_CLIENTE*/


--6. Agregar un aumento del 8% a los empleados que cobren menos de 300 dólares (inclusive).

--UPDATE EMPLEADO SET SALARIO=(SALARIO*1.08) WHERE SALARIO<='300'


--7. ¿Cuántos proovedores tiene la empresa?

--SELECT COUNT(ID_PROOVEDOR) AS PROOVEDORES FROM PROOVEDOR


/*8. Seleccionar el id, nombre, marca, precio, descripcion y una columna llamada OFERTA que realizara un descuento 
del 7% a los productos mayores a 900 dólares*/

/*SELECT ID_PRODUCTO, NOMBRE, MARCA, PRECIO, DESCRIPCION, (PRECIO-(PRECIO*0.07)) AS OFERTA FROM PRODUCTO_ALBROOK WHERE 
PRECIO>900*/


--9. Cambiar el nombre del departamento de contabilidad por 'Finanzas'

--UPDATE DEPARTAMENTO SET NOM_DEP='Finanzas' WHERE NOM_DEP='Contabilidad'


--10. Seleccionar a los empleados que hayan realizado ventas mayores a 500 dólares en Albrook Mall.

/*SELECT DISTINCT VENTA_ALBROOK.ID_EMPLEADO, EMPLEADO.NOMBRE, APELLIDO, PRODUCTO_ALBROOK.NOMBRE, DESCRIPCION, PRECIO 
FROM EMPLEADO, PRODUCTO_ALBROOK, VENTA_ALBROOK WHERE PRECIO>500 AND VENTA_ALBROOK.ID_EMPLEADO=EMPLEADO.ID_EMPLEADO AND
PRODUCTO_ALBROOK.ID_PRODUCTO=VENTA_ALBROOK.ID_PRODUCTO*/


--11. Obtener el promedio de todos productos de Westland y Albrook con 2 cifras significativas.

/*SELECT ROUND(AVG(PRECIO),2) AS 'PROMEDIO', ('WESTLAND') AS 'SUCURSAL' FROM PRODUCTO_WESTLAND UNION SELECT 
ROUND(AVG(PRECIO),2), ('ALBROOK') FROM PRODUCTO_ALBROOK*/


--12. Seleccionar la venta mayor generada en Albrook.

/*SELECT MAX(PRECIO) AS VENTA_MAYOR FROM PRODUCTO_ALBROOK, VENTA_ALBROOK WHERE VENTA_ALBROOK.ID_PRODUCTO=PRODUCTO_ALBROOK.ID_PRODUCTO*/


--13. Muestre las ventas realizadas en el mes de diciembre de 2020, en la sucursal Albrook Mall

/*SELECT * FROM VENTA_ALBROOK WHERE MONTH(FECHA_VENTA)=12 */


--14. Seleccionar todas las ventas efectuadas en la sucursal Albrook durante el año 2021

/*SELECT * FROM VENTA_ALBROOK WHERE YEAR(FECHA_VENTA)=2021 */


--15. Se desea desplegar a todos los empleados de la empresa excepto a aquellos que realizan ventas

/*SELECT ID_EMPLEADO, NOMBRE FROM EMPLEADO EXCEPT SELECT EMPLEADO.ID_EMPLEADO, EMPLEADO.NOMBRE FROM EMPLEADO, VENTA_ALBROOK, 
VENTA_WESTLAND WHERE EMPLEADO.ID_EMPLEADO=VENTA_ALBROOK.ID_EMPLEADO AND EMPLEADO.ID_EMPLEADO=VENTA_WESTLAND.ID_EMPLEADO*/






--=====================================================================================================================================================

--=================================================================  FUNCIONES  =======================================================================

-- (1) --
GO
CREATE FUNCTION STOCK_INVENTARIO_ALBROOK(@ID_PRODUCTO VARCHAR(5))
	RETURNS INT
AS
	BEGIN
		DECLARE @OUT_CANTIDAD INT
		SET @OUT_CANTIDAD = (SELECT PRODUCTO_ALBROOK.CANTIDAD FROM PRODUCTO_ALBROOK WHERE ID_PRODUCTO = @ID_PRODUCTO)
		RETURN @OUT_CANTIDAD
	END
	-- Retorna las unidades disponibles de un producto específico en la tabla PRODUCTO_ALBROOK
	-- Es utilizada en el trigger ACTUALIZAR_INVENTARIO_ALBROOK

	-- Prueba:
			 --SELECT dbo.STOCK_INVENTARIO_ALBROOK(ID_PRODUCTO) FROM PRODUCTO_ALBROOK WHERE ID_PRODUCTO = 'P0001'



-- (2) --
GO
CREATE FUNCTION UPPER_FIRST_LETTER(@CIUDAD VARCHAR(25))
	RETURNS VARCHAR(25)
AS
	BEGIN
		DECLARE @WORD_MAYUS VARCHAR(25)
		SET @WORD_MAYUS = CONCAT(SUBSTRING(UPPER(@CIUDAD), 1, 1), LOWER(SUBSTRING(@CIUDAD, 2, len(@CIUDAD)-1)))
		RETURN @WORD_MAYUS
	END
	-- Toma como parámetro una ciudad y retorna esta palabra con la primera letra en mayúscula
	-- Función utilizada en el procedimiento de almacenado CANT_SUC_XCIUDAD

	-- Prueba: 
				--SELECT dbo.UPPER_FIRST_LETTER('PANAMÁ')
				


-- (3) --
GO
CREATE FUNCTION TIEMPO_CONTRATO(@ID_EMPLEADO VARCHAR(20))
	RETURNS INT
AS
	BEGIN
		DECLARE @AÑOS_REST INT, @FIN INT
		SET @FIN = (SELECT YEAR(FIN_CONTRATO) FROM EMPLEADO WHERE ID_EMPLEADO = @ID_EMPLEADO)
		SET @AÑOS_REST = (SELECT @FIN - YEAR(GETDATE()))
		RETURN @AÑOS_REST
	END
	-- Recibe como parámetro el ID del empleado y retorna los años restantes para que culmine el contrato 
	-- Función utilizada en el procedimiento de almacenado SP_TIEMPO_CONTRATO

	-- Prueba:
				--SELECT dbo.TIEMPO_CONTRATO('2-760-873')
				
				


-- (4) --
GO
CREATE FUNCTION AÑOS_SERVICIO(@ID_EMPLEADO VARCHAR(20))
	RETURNS INT
AS
	BEGIN
		DECLARE @AÑOS_SERVICIO INT, @INICIO INT
		SET @INICIO = (SELECT YEAR(INI_CONTRATO) FROM EMPLEADO WHERE ID_EMPLEADO = @ID_EMPLEADO)
		SET @AÑOS_SERVICIO = (SELECT YEAR(GETDATE()) - @INICIO)
		RETURN @AÑOS_SERVICIO
	END
	-- Recibe como parámetro el ID del empleado y retorna los años de servicio
	-- Función utilizada en el procedimiento de almacenado SP_TIEMPO_CONTRATO

	-- Prueba:
				-- SELECT dbo.AÑOS_SERVICIO('2-760-873')
				-- como inicio contrato este año a penas tiene meses de servicio, por esa razón retorna cero



-- (5) --
GO
CREATE FUNCTION CANT_SUC_XCIUDAD(@CIUDAD VARCHAR(20))
	RETURNS INT
AS
	BEGIN
		DECLARE @CANT INT
		SET @CANT= (SELECT DISTINCT COUNT(*) FROM SUCURSAL WHERE CIUDAD = @CIUDAD)
		RETURN @CANT
	END
	-- Retorna la cantidad de sucursales disponibles en una ciudad
	-- function usada en procedimiento de almacenado SP_SUC_CIUDAD
	




--==================================================================================================================================================

--====================================================================  TRIGGERS  ===================================================================

-- (1) -- 
GO
CREATE TRIGGER CLIENTE_PAPELERA ON CLIENTE
	FOR DELETE
AS
	BEGIN
		DECLARE  @ID_CLIENTE VARCHAR(20), @NOMBRE VARCHAR(25), @APELLIDO VARCHAR(25),
		@CORREO VARCHAR(30), @TELEFONO VARCHAR(15), @FEC_NAC DATE, @FECHA_ELIMINACION SMALLDATETIME

		SET @ID_CLIENTE = (SELECT ID_CLIENTE FROM deleted)
		SET @NOMBRE = (SELECT NOMBRE FROM deleted)
		SET @APELLIDO = (SELECT APELLIDO FROM deleted)
		SET @CORREO = (SELECT CORREO FROM deleted)
		SET @TELEFONO = (SELECT TELEFONO FROM deleted)
		SET @FEC_NAC = (SELECT FEC_NAC FROM deleted)

		INSERT INTO CLIENTE_ELIMINADO(ID_CLIENTE, NOMBRE, APELLIDO, CORREO, TELEFONO, FEC_NAC, FECHA_ELIMINACION)
		VALUES(@ID_CLIENTE, @NOMBRE, @APELLIDO, @CORREO, @TELEFONO, @FEC_NAC, CURRENT_TIMESTAMP)
		PRINT('LA FILA ELIMINADA HA SIDO GUARDADA EN LA TABLA CLIENTE_ELIMINADO')
	END
	-- Disparador utilizado para guardar los registros eliminados de la tabla CLIENTE en la tabla CLIENTE_ELIMINADO

	--Prueba:
				/*
				--paso 1
					INSERT INTO CLIENTE (ID_CLIENTE, NOMBRE, APELLIDO, CORREO, TELEFONO, FEC_NAC) 
					VALUES('8-555-263', 'Laynes', 'Montillo', 'montillo0@meetup.com', '6348-2164', '1961-04-04')

				--paso 2
					DELETE FROM CLIENTE WHERE ID_CLIENTE = '8-555-263'
					
				--paso 3
					SELECT * FROM CLIENTE
					SELECT * FROM CLIENTE_ELIMINADO
				*/



-- (2) --
GO
CREATE TRIGGER VENTA_ALBROOK_RESPALDO ON VENTA_ALBROOK
	FOR INSERT
AS
	BEGIN
		DECLARE  @ID_VENTA VARCHAR(5), @NUM_FAC VARCHAR(6), @ID_CLIENTE VARCHAR(20),
				 @MET_PAGO VARCHAR(20), @CANTIDAD INT, @ID_EMPLEADO VARCHAR(20),
				 @ID_SUCURSAL VARCHAR(5), @ID_PRODUCTO VARCHAR(5), @FECHA_VENTA SMALLDATETIME

		SET @ID_VENTA = (SELECT ID_VENTA FROM inserted)
		SET @NUM_FAC = (SELECT NUM_FAC FROM inserted)
		SET @ID_CLIENTE = (SELECT ID_CLIENTE FROM inserted)
		SET @MET_PAGO = (SELECT MET_PAGO FROM inserted)
		SET @CANTIDAD = (SELECT CANTIDAD FROM inserted)
		SET @ID_EMPLEADO = (SELECT ID_EMPLEADO FROM inserted)
		SET @ID_SUCURSAL = (SELECT ID_SUCURSAL FROM inserted)
		SET @ID_PRODUCTO = (SELECT ID_PRODUCTO FROM inserted)
		SET @FECHA_VENTA = (SELECT FECHA_VENTA FROM inserted)

		INSERT INTO INSERT_VENTA_ALBROOK(ID_VENTA, NUM_FAC, ID_CLIENTE, MET_PAGO, CANTIDAD, ID_EMPLEADO, ID_SUCURSAL, ID_PRODUCTO, FECHA_VENTA, FECHA_REGISTRO)
		VALUES(@ID_VENTA, @NUM_FAC, @ID_CLIENTE, @MET_PAGO, @CANTIDAD, @ID_EMPLEADO, @ID_SUCURSAL, @ID_PRODUCTO, @FECHA_VENTA, GETDATE())
		PRINT('El registro insertado en la tabla VENTA_ALBROOK se ha guardado en la tabla de respaldo denominada INSERT_VENTA_ALBROOK')
	END
	-- Disparador empleado para registrar las ventas insertadas de la tabla VENTA_ALBROOK en una tabla de respaldo denominada VENTA_ALBROOK_RESPALDO

	-- Prueba:
				/*
					--paso 1
					INSERT INTO VENTA_ALBROOK (ID_VENTA, NUM_FAC, ID_CLIENTE, MET_PAGO, CANTIDAD, ID_EMPLEADO, ID_SUCURSAL, ID_PRODUCTO, FECHA_VENTA) 
					VALUES('V0007', 'F0007', '9-566-761', 'Efectivo', '1', '2-760-873', 'S0001', 'P0001', '12/14/2020')

					--paso 2
					SELECT * FROM VENTA_ALBROOK
					SELECT * FROM INSERT_VENTA_ALBROOK
				*/


-- (3) --
GO
CREATE TRIGGER VENTA_ELIMINADA ON VENTA_ALBROOK
	FOR DELETE
AS
	BEGIN
		DECLARE  @ID_VENTA VARCHAR(5), @NUM_FAC VARCHAR(6), @ID_CLIENTE VARCHAR(20),
				 @MET_PAGO VARCHAR(20), @CANTIDAD INT, @ID_EMPLEADO VARCHAR(20),
				 @ID_SUCURSAL VARCHAR(5), @ID_PRODUCTO VARCHAR(5), @FECHA_VENTA SMALLDATETIME

		SET @ID_VENTA = (SELECT ID_VENTA FROM deleted)
		SET @NUM_FAC = (SELECT NUM_FAC FROM deleted)
		SET @ID_CLIENTE = (SELECT ID_CLIENTE FROM deleted)
		SET @MET_PAGO = (SELECT MET_PAGO FROM deleted)
		SET @CANTIDAD = (SELECT CANTIDAD FROM deleted)
		SET @ID_EMPLEADO = (SELECT ID_EMPLEADO FROM deleted)
		SET @ID_SUCURSAL = (SELECT ID_SUCURSAL FROM deleted)
		SET @ID_PRODUCTO = (SELECT ID_PRODUCTO FROM deleted)
		SET @FECHA_VENTA = (SELECT FECHA_VENTA FROM deleted)

		INSERT INTO DELETE_VENTA_ALBROOK(ID_VENTA, NUM_FAC, ID_CLIENTE, MET_PAGO, CANTIDAD, ID_EMPLEADO, ID_SUCURSAL, ID_PRODUCTO, FECHA_VENTA, FECHA_REGISTRO)
		VALUES(@ID_VENTA, @NUM_FAC, @ID_CLIENTE, @MET_PAGO, @CANTIDAD, @ID_EMPLEADO, @ID_SUCURSAL, @ID_PRODUCTO, @FECHA_VENTA, CURRENT_TIMESTAMP)
		PRINT('El registro eliminado ha sido guardado en la tabla DELETE_VENTA_ALBROOK')
	END
	-- Disparador empleado para registrar las ventas eliminadas de la tabla VENTA_ALBROOK en la tabla DELETE_VENTA_ALBROOK

	-- Prueba:
				/*	paso 1
					DELETE FROM VENTA_ALBROOK WHERE ID_VENTA = 'V0005'

					paso 2
					SELECT * FROM VENTA_ALBROOK
					SELECT * FROM DELETE_VENTA_ALBROOK
				*/


-- (4) --
GO
CREATE TRIGGER ACTUALIZAR_INVENTARIO_ALBROOK ON VENTA_ALBROOK
	FOR INSERT
AS
	BEGIN
		DECLARE  @ID_PRODUCTO VARCHAR(5), @CANTIDAD_REQ INT, @NOMBRE VARCHAR(25), @CANT_DISP INT, @ID_VENTA VARCHAR(5);

		SET @ID_PRODUCTO = (SELECT ID_PRODUCTO FROM inserted)
		SET @CANTIDAD_REQ = (SELECT CANTIDAD FROM inserted)
		SET @NOMBRE = (SELECT NOMBRE FROM PRODUCTO_ALBROOK WHERE ID_PRODUCTO = @ID_PRODUCTO)
		SET @CANT_DISP = (SELECT CANTIDAD FROM PRODUCTO_ALBROOK WHERE ID_PRODUCTO = @ID_PRODUCTO)
		SET @ID_VENTA = (SELECT ID_VENTA FROM inserted)

		IF(((SELECT dbo.STOCK_INVENTARIO_ALBROOK(@ID_PRODUCTO)) - @CANTIDAD_REQ) < 0 OR @CANTIDAD_REQ = 0)
			BEGIN
				PRINT(CONCAT(CHAR(13), 'La cantidad de producto que requiere no está disponible. Actualmente el producto ',@NOMBRE, ' mantiene ', @CANT_DISP, ' unidades.'))
				DELETE FROM VENTA_ALBROOK WHERE ID_VENTA = @ID_VENTA
				DELETE FROM DELETE_VENTA_ALBROOK WHERE ID_VENTA = @ID_VENTA
				DELETE FROM INSERT_VENTA_ALBROOK WHERE ID_VENTA = @ID_VENTA
				PRINT('El registro de venta será eliminado de la tabla VENTA_ALBROOK y de las tablas de auditoría DELETE_VENTA_ALBROOK e INSERT_VENTA_ALBROOK')
			END
		ELSE
			BEGIN
				UPDATE PRODUCTO_ALBROOK SET PRODUCTO_ALBROOK.CANTIDAD = PRODUCTO_ALBROOK.CANTIDAD - @CANTIDAD_REQ WHERE PRODUCTO_ALBROOK.ID_PRODUCTO = @ID_PRODUCTO
				PRINT('Proceso de venta realizado con éxito. El Campo cantidad de tabla PRODUCTO_ALBROOK ha sido actualizado.')
			END
	END
	-- Al intentar insertar un registro en la tabla VENTA_ALBROOK, el disparador verifica la disponibilidad del producto con respecto a la cantidad solicitada
	
	-- Prueba:
				/*
					--paso 1
					insert into VENTA_ALBROOK (ID_VENTA, NUM_FAC, ID_CLIENTE, MET_PAGO, CANTIDAD, ID_EMPLEADO, ID_SUCURSAL, ID_PRODUCTO) values 
					('V0008', 'F0008', '10-658-014', 'Efectivo', '10', '2-760-873', 'S0001', 'P0002')

					--paso 2 - verificar que no se insertó el registro en la tabla VENTA_ALBROOK por exceder la cantidad de productos disponibles en el inventario PRODUCTO_ALBROOK
					SELECT * FROM VENTA_ALBROOK

					-- Inventario --
					SELECT * FROM PRODUCTO_ALBROOK
				*/





--===============================================================================================================================================

--===================================================== PROCEDIMIENTOS DE ALMACENADO ============================================================


--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--1. Procedimiento almacenado para ingresar datos a cada una de las tablas //////////////////////////////////////////////////////

--TABLA SUCURSAL
GO
CREATE PROCEDURE SP_INS_SUCURSAL
@ID_SUCURSAL VARCHAR(5), @NOMBRE VARCHAR(25), @CIUDAD VARCHAR(25), @TELEFONO VARCHAR(20)
AS
INSERT INTO SUCURSAL
VALUES(@ID_SUCURSAL, @NOMBRE, @CIUDAD, @TELEFONO)
--EXEC SP_INS_SUCURSAL '1235','n','n','n';                  
           

		   
-- TABLA EMPLEADO 
GO
CREATE PROCEDURE SP_INS_EMPLEADO
@ID_EMPLEADO VARCHAR(20), @NOMBRE VARCHAR(25), @APELLIDO VARCHAR(25), @TELEFONO VARCHAR(15), @CORREO VARCHAR(30), @SEXO VARCHAR(15), @FEC_NAC DATE, @TRABAJO VARCHAR(20), @SALARIO MONEY, @INI_CONTRATO DATE, @FIN_CONTRATO DATE, @ID_DEPART VARCHAR(5), @ID_SUCURSAL VARCHAR(5)
AS
INSERT INTO EMPLEADO
VALUES(@ID_EMPLEADO, @NOMBRE, @APELLIDO, @TELEFONO, @CORREO, @SEXO, @FEC_NAC, @TRABAJO, @SALARIO,  @INI_CONTRATO,  @FIN_CONTRATO,  @ID_DEPART, @ID_SUCURSAL)

/*SELECT*FROM EMPLEADO
EXEC SP_INS_EMPLEADO '1234','A','A','A','A','A','1999-8-16','A','69','1992-8-6','2000-8-4','a';
EXEC SP_DELETE_EMPLEADO '1234';*/



--TABLA  CLIENTE 
GO
CREATE PROCEDURE SP_INS_CLIENTE
@ID_CLIENTE VARCHAR(20), @NOMBRE VARCHAR(25), @APELLIDO VARCHAR(25), @CORREO VARCHAR(30), @TELEFONO VARCHAR(15), @FEC_NAC DATE
AS
INSERT INTO CLIENTE
VALUES(@ID_CLIENTE, @NOMBRE , @APELLIDO , @CORREO, @TELEFONO, @FEC_NAC)



--TABLA PROOVEDOR 
GO
CREATE PROCEDURE SP_INS_PROOVEDOR
@ID_PROOVEDOR VARCHAR(5), @NOMBRE VARCHAR(25), @TELEFONO VARCHAR(15), @CORREO VARCHAR(30),  @DIRECCION VARCHAR(100)
AS
INSERT INTO PROOVEDOR
VALUES(@ID_PROOVEDOR , @NOMBRE , @TELEFONO , @CORREO ,  @DIRECCION )



--TABLA DEPARTAMENTO 
GO
CREATE PROCEDURE SP_INS_DEPARTAMENTO
@ID_DEPART VARCHAR(5), @NOM_DEP VARCHAR(25)
AS
INSERT INTO DEPARTAMENTO
VALUES(@ID_DEPART, @NOM_DEP)



--TABLA PRODUCTO_ALBROOK 
GO
CREATE PROCEDURE SP_INS_P_ALBROOK
@ID_PRODUCTO VARCHAR(5),@NOMBRE VARCHAR(25),@DESCRIPCION VARCHAR(30),@PRECIO MONEY,@CANTIDAD INT, @ID_PROOVEDOR VARCHAR(5), @MARCA VARCHAR(20)
AS
INSERT INTO PRODUCTO_ALBROOK
VALUES(@ID_PRODUCTO ,@NOMBRE, @MARCA, @DESCRIPCION ,@PRECIO ,@CANTIDAD , @ID_PROOVEDOR)


--LO DE ARRIBA FUNCIONA
  --TABLA PRODUCTO_WESTLAND 
  GO
CREATE PROCEDURE SP_INS_P_WESTLAND 
@ID_PRODUCTO VARCHAR(5),@NOMBRE VARCHAR(25),@DESCRIPCION VARCHAR(30),@PRECIO MONEY,@CANTIDAD INT, @ID_PROOVEDOR VARCHAR(5), @MARCA VARCHAR(20)
AS
INSERT INTO PRODUCTO_WESTLAND
VALUES(@ID_PRODUCTO ,@NOMBRE, @MARCA, @DESCRIPCION ,@PRECIO ,@CANTIDAD , @ID_PROOVEDOR)



  --TABLA  VENTA_ALBROOK 
  GO
CREATE PROCEDURE SP_INS_v_ALBROOK
@ID_VENTA VARCHAR(5),@NUM_FAC VARCHAR(6),@ID_CLIENTE VARCHAR(20),@MET_PAGO VARCHAR(20),@CANTIDAD INT,@ID_EMPLEADO VARCHAR(20),@ID_SUCURSAL VARCHAR(5),@ID_PRODUCTO VARCHAR(5), @FECHA_VENTA DATETIME
AS
INSERT INTO VENTA_ALBROOK
VALUES(@ID_VENTA, @NUM_FAC ,@ID_CLIENTE ,@MET_PAGO ,@CANTIDAD ,@ID_EMPLEADO ,@ID_SUCURSAL ,@ID_PRODUCTO, @FECHA_VENTA)



--TABLA VENTA_WESTLAND 
GO
CREATE PROCEDURE SP_INS_v_WESTLAND
@ID_VENTA VARCHAR(5),@NUM_FAC VARCHAR(6),@ID_CLIENTE VARCHAR(20),@MET_PAGO VARCHAR(20),@CANTIDAD INT,@ID_EMPLEADO VARCHAR(20),@ID_SUCURSAL VARCHAR(5),@ID_PRODUCTO VARCHAR(5), @FECHA_VENTA DATETIME
AS
INSERT INTO VENTA_WESTLAND
VALUES(@ID_VENTA, @NUM_FAC, @ID_CLIENTE,@MET_PAGO ,@CANTIDAD ,@ID_EMPLEADO ,@ID_SUCURSAL ,@ID_PRODUCTO, @FECHA_VENTA)



  --TABLA VENTA_ALBROOK_PAPELERA
  GO
CREATE PROCEDURE SP_INS_VENTA_ALBROOKP
@ID_VENTA VARCHAR(5),@NUM_FAC VARCHAR(6),@ID_CLIENTE VARCHAR(20),@MET_PAGO VARCHAR(20),@CANTIDAD INT,@ID_EMPLEADO VARCHAR(20),@ID_SUCURSAL VARCHAR(5), @ID_PRODUCTO VARCHAR(5),@FECHA_VENTA DATE,@FECHA_REGISTRO DATETIME
AS
INSERT INTO VENTA_ALBROOK_PAPELERA
VALUES(@ID_VENTA ,@NUM_FAC ,@ID_CLIENTE ,@MET_PAGO ,@CANTIDAD ,@ID_EMPLEADO ,@ID_SUCURSAL, @ID_PRODUCTO ,@FECHA_VENTA ,@FECHA_REGISTRO )






--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--2. Procedimiento almacenado para hacer actualización de campos a cada una de las tablas ////////////////////////////////////////////////////

--TABLA SUCURSAL
GO
CREATE PROCEDURE SP_UPDATE_SUCURSAL
@ID_SUCURSAL VARCHAR(5), @NOMBRE VARCHAR(25), @CIUDAD VARCHAR(25), @TELEFONO VARCHAR(20)
AS
BEGIN
IF EXISTS(SELECT*FROM SUCURSAL WHERE ID_SUCURSAL=@ID_SUCURSAL)
BEGIN
UPDATE SUCURSAL SET ID_SUCURSAL=@ID_SUCURSAL, NOMBRE=@NOMBRE, CIUDAD=@CIUDAD, TELEFONO=@TELEFONO
WHERE ID_SUCURSAL=@ID_SUCURSAL
END
END

--EXEC SP_UPDATE_SUCURSAL 'S0001','n','n','n';                  
    
	

-- TABLA EMPLEADO 
GO
CREATE PROCEDURE SP_UPDATE_EMPLEADO
@ID_EMPLEADO VARCHAR(20), @NOMBRE VARCHAR(25), @APELLIDO VARCHAR(25), @TELEFONO VARCHAR(15), @CORREO VARCHAR(30), @SEXO VARCHAR(15), @FEC_NAC DATE, @TRABAJO VARCHAR(20), @SALARIO MONEY, @INI_CONTRATO DATE, @FIN_CONTRATO DATE, @ID_DEPART VARCHAR(5)
AS
BEGIN
IF EXISTS(SELECT*FROM EMPLEADO WHERE ID_EMPLEADO=@ID_EMPLEADO)
BEGIN
UPDATE EMPLEADO SET  @ID_EMPLEADO=ID_EMPLEADO, @NOMBRE=NOMBRE, @APELLIDO=APELLIDO, @TELEFONO=TELEFONO, @CORREO=CORREO, @SEXO=SEXO, @FEC_NAC=FEC_NAC, @TRABAJO=TRABAJO, @SALARIO=SALARIO,  @INI_CONTRATO=INI_CONTRATO,  @FIN_CONTRATO=FIN_CONTRATO,  @ID_DEPART=ID_DEPART
WHERE ID_EMPLEADO=@ID_EMPLEADO
END
END

/*SELECT*FROM EMPLEADO
EXEC SP_UPDATE_EMPLEADO '1234','A','A','A','A','A','1999-8-16','A','69','1992-8-6','2000-8-4','a';
EXEC SP_DELETE_EMPLEADO '1234';*/



--TABLA  CLIENTE 
GO
CREATE PROCEDURE SP_UPDATE_CLIENTE
@ID_CLIENTE VARCHAR(20), @NOMBRE VARCHAR(25), @APELLIDO VARCHAR(25), @CORREO VARCHAR(30), @TELEFONO VARCHAR(15), @FEC_NAC DATE
AS
BEGIN
IF EXISTS(SELECT*FROM CLIENTE WHERE ID_CLIENTE=@ID_CLIENTE)
BEGIN
UPDATE CLIENTE SET @ID_CLIENTE=ID_CLIENTE, @NOMBRE=NOMBRE , @APELLIDO=APELLIDO , @CORREO=CORREO, @TELEFONO=TELEFONO, @FEC_NAC=FEC_NAC
WHERE ID_CLIENTE=@ID_CLIENTE
END 
END


--TABLA PROOVEDOR 
GO
CREATE PROCEDURE SP_UPDATE_PROOVEDOR
@ID_PROOVEDOR VARCHAR(5), @NOMBRE VARCHAR(25), @TELEFONO VARCHAR(15), @CORREO VARCHAR(30),  @DIRECCION VARCHAR(100)
AS
BEGIN
IF EXISTS(SELECT*FROM PROOVEDOR WHERE ID_PROOVEDOR=@ID_PROOVEDOR )
BEGIN
UPDATE PROOVEDOR SET @ID_PROOVEDOR=ID_PROOVEDOR , @NOMBRE=NOMBRE , @TELEFONO=TELEFONO , @CORREO=CORREO ,  @DIRECCION=DIRECCION
WHERE @ID_PROOVEDOR=ID_PROOVEDOR
END
END



--TABLA DEPARTAMENTO 
GO
CREATE PROCEDURE SP_UPDATE_DEPARTAMENTO
@ID_DEPART VARCHAR(5), @NOM_DEP VARCHAR(25)
AS
BEGIN
IF EXISTS(SELECT*FROM DEPARTAMENTO WHERE @ID_DEPART=ID_DEPART)
BEGIN
UPDATE  DEPARTAMENTO SET @ID_DEPART=ID_DEPART, @NOM_DEP=NOM_DEP
WHERE @ID_DEPART=ID_DEPART
END
END



--TABLA PRODUCTO_ALBROOK 
GO
CREATE PROCEDURE SP_UPDATE_P_ALBROOK
@ID_PRODUCTO VARCHAR(5),@NOMBRE VARCHAR(25),@DESCRIPCION VARCHAR(30),@PRECIO MONEY,@CANTIDAD INT, @ID_PROOVEDOR VARCHAR(5)
AS
BEGIN
IF EXISTS(SELECT*FROM PRODUCTO_ALBROOK WHERE @ID_PRODUCTO=ID_PRODUCTO)
BEGIN
UPDATE PRODUCTO_ALBROOK SET @ID_PRODUCTO=ID_PRODUCTO ,@NOMBRE=NOMBRE ,@DESCRIPCION=DESCRIPCION ,@PRECIO=PRECIO ,@CANTIDAD=CANTIDAD , @ID_PROOVEDOR=ID_PROOVEDOR
WHERE @ID_PRODUCTO=ID_PRODUCTO
END
END



  --TABLA PRODUCTO_WESTLAND 
  GO
CREATE PROCEDURE SP_UPDATE_P_WESTLAND 
@ID_PRODUCTO VARCHAR(5),@NOMBRE VARCHAR(25),@DESCRIPCION VARCHAR(30),@PRECIO MONEY,@CANTIDAD INT, @ID_PROOVEDOR VARCHAR(5)
AS
BEGIN
IF EXISTS(SELECT*FROM PRODUCTO_WESTLAND  WHERE @ID_PRODUCTO=ID_PRODUCTO)
BEGIN
UPDATE PRODUCTO_WESTLAND  SET @ID_PRODUCTO=ID_PRODUCTO ,@NOMBRE=NOMBRE ,@DESCRIPCION=DESCRIPCION ,@PRECIO=PRECIO ,@CANTIDAD=CANTIDAD , @ID_PROOVEDOR=ID_PROOVEDOR
WHERE @ID_PRODUCTO=ID_PRODUCTO
END
END



  --TABLA  VENTA_ALBROOK 
  GO
CREATE PROCEDURE SP_UPDATE_v_ALBROOK
@ID_VENTA VARCHAR(5),@NUM_FAC VARCHAR(6),@ID_CLIENTE VARCHAR(20),@MET_PAGO VARCHAR(20),@CANTIDAD INT,@ID_EMPLEADO VARCHAR(20),@ID_SUCURSAL VARCHAR(5),@ID_PRODUCTO VARCHAR(5)
AS
BEGIN
IF EXISTS(SELECT*FROM VENTA_ALBROOK WHERE @ID_VENTA=ID_VENTA)
BEGIN
UPDATE VENTA_ALBROOK SET @ID_VENTA=ID_VENTA, @NUM_FAC=NUM_FAC ,@ID_CLIENTE=ID_CLIENTE ,@MET_PAGO=MET_PAGO ,@CANTIDAD=CANTIDAD ,@ID_EMPLEADO=ID_EMPLEADO ,@ID_PRODUCTO=ID_PRODUCTO
WHERE @ID_VENTA=ID_VENTA
END
END


--TABLA VENTA_WESTLAND 
GO
CREATE PROCEDURE SP_UPDATE_v_WESTLAND
@ID_VENTA VARCHAR(5),@NUM_FAC VARCHAR(6),@ID_CLIENTE VARCHAR(20),@MET_PAGO VARCHAR(20),@CANTIDAD INT,@ID_EMPLEADO VARCHAR(20),@ID_SUCURSAL VARCHAR(5),@ID_PRODUCTO VARCHAR(5)
AS
BEGIN
IF EXISTS(SELECT*FROM VENTA_WESTLAND  WHERE @ID_VENTA=ID_VENTA)
BEGIN
UPDATE VENTA_WESTLAND  SET @ID_VENTA=ID_VENTA, @NUM_FAC=NUM_FAC ,@ID_CLIENTE=ID_CLIENTE ,@MET_PAGO=MET_PAGO ,@CANTIDAD=CANTIDAD ,@ID_EMPLEADO=ID_EMPLEADO , @ID_PRODUCTO=ID_PRODUCTO
WHERE @ID_VENTA=ID_VENTA
END
END


  --TABLA VENTA_ALBROOK_PAPELERA
  GO
CREATE PROCEDURE SP_UPDATE_VENTA_ALBROOKP
@ID_VENTA VARCHAR(5),@NUM_FAC VARCHAR(6),@ID_CLIENTE VARCHAR(20),@MET_PAGO VARCHAR(20),@CANTIDAD INT,@ID_EMPLEADO VARCHAR(20),@ID_SUCURSAL VARCHAR(5), @ID_PRODUCTO VARCHAR(5),@FECHA_VENTA DATE,@FECHA_REGISTRO DATE
AS
BEGIN
IF EXISTS(SELECT*FROM VENTA_ALBROOK_PAPELERA WHERE @ID_VENTA=ID_VENTA)
BEGIN
UPDATE VENTA_ALBROOK_PAPELERA SET  @ID_VENTA=ID_VENTA ,@NUM_FAC=NUM_FAC ,@ID_CLIENTE=ID_CLIENTE ,@MET_PAGO=MET_PAGO ,@CANTIDAD=CANTIDAD ,@ID_EMPLEADO=ID_EMPLEADO ,@ID_SUCURSAL=ID_SUCURSAL, @ID_PRODUCTO=ID_PRODUCTO ,@FECHA_VENTA=FECHA_VENTA ,@FECHA_REGISTRO=FECHA_REGISTRO
WHERE @ID_VENTA=ID_VENTA
END
END




--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--3. Procedimiento almacenado para borrar una fila o registro por su llave primaria.//////////////////////////////////////////////////////////

--TABLA SUCURSAL
GO
CREATE PROCEDURE SP_DELETED_SUCURSAL
(@ID_SUCURSAL VARCHAR(5)='', @NOMBRE VARCHAR(25)='', @CIUDAD VARCHAR(25)='', @TELEFONO VARCHAR(20)='')
AS
BEGIN
DELETE FROM SUCURSAL
WHERE ID_SUCURSAL=@ID_SUCURSAL
END


-- TABLA EMPLEADO 
GO
CREATE PROCEDURE SP_DELETE_EMPLEADO
(@ID_EMPLEADO VARCHAR(20)='')
AS
DELETE FROM EMPLEADO
WHERE ID_EMPLEADO=@ID_EMPLEADO


GO
--TABLA  CLIENTE 
CREATE PROCEDURE SP_DELETE_CLIENTE
(@ID_CLIENTE VARCHAR(20)='')
AS
DELETE FROM CLIENTE
WHERE ID_CLIENTE=@ID_CLIENTE


GO
--TABLA PROOVEDOR 
CREATE PROCEDURE SP_DELETE_PROOVEDOR
(@ID_PROOVEDOR VARCHAR(5)='')
AS
DELETE FROM PROOVEDOR
WHERE ID_PROOVEDOR=@ID_PROOVEDOR



--TABLA DEPARTAMENTO 
GO
CREATE PROCEDURE SP_DELETE_DEPARTAMENTO
(@ID_DEPART VARCHAR(5)='')
AS
DELETE FROM  DEPARTAMENTO
WHERE ID_DEPART=@ID_DEPART



--TABLA PRODUCTO_ALBROOK 
GO
CREATE PROCEDURE SP_DELETE_P_ALBROOK
(@ID_PRODUCTO VARCHAR(5)='')
AS
DELETE FROM PRODUCTO_ALBROOK
WHERE ID_PRODUCTO=@ID_PRODUCTO



  --TABLA PRODUCTO_WESTLAND 
  GO
CREATE PROCEDURE SP_DELETE_P_WESTLAND 
(@ID_PRODUCTO VARCHAR(5)='')
AS
DELETE FROM PRODUCTO_WESTLAND
WHERE ID_PRODUCTO=@ID_PRODUCTO



  --TABLA  VENTA_ALBROOK 
  GO
CREATE PROCEDURE SP_DELETE_v_ALBROOK
(@ID_VENTA VARCHAR(5)='')
AS
DELETE FROM VENTA_ALBROOK
WHERE ID_VENTA=@ID_VENTA



--TABLA VENTA_WESTLAND
GO
CREATE PROCEDURE SP_INS_VENTA_WESTLAND
(@ID_VENTA VARCHAR(5)='')
AS
DELETE FROM VENTA_WESTLAND
WHERE ID_VENTA=@ID_VENTA



  --TABLA VENTA_ALBROOK_PAPELERA
  GO
CREATE PROCEDURE SP_INS_VENTA_ALBROOK
(@ID_VENTA VARCHAR(5)='')
AS
DELETE FROM VENTA_ALBROOK_PAPELERA
WHERE ID_VENTA=@ID_VENTA





--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--4. Procedimiento almacenado para realizar una búsqueda de un registro utilizando su llave primaria.///////////////////////////////////////

--TABLA SUCURSAL
GO
CREATE PROCEDURE SP_SEARCH_SUCURSAL
@ID_SUCURSAL VARCHAR(5)
AS
BEGIN
   IF EXISTS (SELECT* FROM SUCURSAL
   WHERE ID_SUCURSAL=@ID_SUCURSAL)  
			BEGIN
			SELECT*FROM SUCURSAL WHERE ID_SUCURSAL=@ID_SUCURSAL
			END
     ELSE 
BEGIN
	 PRINT('NO SE ENCONTRO REGISTRO');
	 END
END

--EXEC SP_SEARCH_SUCURSAL 's0000'
               
			   

-- TABLA EMPLEADO 
GO
CREATE PROCEDURE SP_SEARCH_EMPLEADO
@ID_EMPLEADO VARCHAR(20)
AS
BEGIN
IF EXISTS(SELECT*FROM EMPLEADO
WHERE ID_EMPLEADO=@ID_EMPLEADO)
 BEGIN
SELECT*FROM EMPLEADO WHERE ID_EMPLEADO=@ID_EMPLEADO
END
     ELSE 
BEGIN
	 PRINT('NO SE ENCONTRO REGISTRO');
	 END
END



--TABLA  CLIENTE 
GO
CREATE PROCEDURE SP_SEARCH_CLIENTE
@ID_CLIENTE VARCHAR(20)
AS
BEGIN
IF EXISTS (SELECT*FROM CLIENTE
WHERE ID_CLIENTE=@ID_CLIENTE)
BEGIN SELECT*FROM CLIENTE WHERE ID_CLIENTE=@ID_CLIENTE
END
ELSE
BEGIN
	 PRINT('NO SE ENCONTRO REGISTRO');
	 END
END



--TABLA PROOVEDOR 
GO
CREATE PROCEDURE SP_SEARCH_PROOVEDOR
@ID_PROOVEDOR VARCHAR(5)
AS
BEGIN
IF EXISTS(SELECT*FROM PROOVEDOR
WHERE ID_PROOVEDOR=@ID_PROOVEDOR)
BEGIN
SELECT*FROM PROOVEDOR WHERE ID_PROOVEDOR=@ID_PROOVEDOR
END
ELSE
BEGIN
	 PRINT('NO SE ENCONTRO REGISTRO');
	 END
END



--TABLA DEPARTAMENTO 
GO
CREATE PROCEDURE SP_SEARCH_DEPARTAMENTO
@ID_DEPART VARCHAR(5)
AS
BEGIN
IF EXISTS (SELECT*FROM DEPARTAMENTO
WHERE ID_DEPART=@ID_DEPART)
BEGIN
SELECT*FROM DEPARTAMENTO WHERE ID_DEPART=@ID_DEPART
END
ELSE
BEGIN
	 PRINT('NO SE ENCONTRO REGISTRO');
	 END
END

--TABLA PRODUCTO_ALBROOK
GO
CREATE PROCEDURE SP_SEARCH_P_ALBROOK
@ID_PRODUCTO VARCHAR(5)
AS
BEGIN
IF EXISTS (SELECT*FROM PRODUCTO_ALBROOK
WHERE ID_PRODUCTO=@ID_PRODUCTO)
BEGIN
SELECT*FROM PRODUCTO_ALBROOK WHERE ID_PRODUCTO=@ID_PRODUCTO
END
ELSE
BEGIN
	 PRINT('NO SE ENCONTRO REGISTRO');
	 END
END



  --TABLA PRODUCTO_WESTLAND
  GO
CREATE PROCEDURE SP_SEARCH_P_WESTLAND 
@ID_PRODUCTO VARCHAR(5)
AS
BEGIN
IF EXISTS (SELECT*FROM PRODUCTO_WESTLAND
WHERE ID_PRODUCTO=@ID_PRODUCTO)
BEGIN
SELECT*FROM PRODUCTO_WESTLAND WHERE ID_PRODUCTO=@ID_PRODUCTO
END
ELSE
BEGIN
	 PRINT('NO SE ENCONTRO REGISTRO');
	 END
END



  --TABLA  VENTA_ALBROOK 
  GO
CREATE PROCEDURE SP_SEARCH_v_ALBROOK
@ID_VENTA VARCHAR(5)
AS
BEGIN
IF EXISTS (SELECT*FROM  VENTA_ALBROOK
WHERE ID_VENTA=@ID_VENTA)
BEGIN
SELECT*FROM  VENTA_ALBROOK WHERE ID_VENTA=@ID_VENTA
END
ELSE
BEGIN
	 PRINT('NO SE ENCONTRO REGISTRO');
	 END
END



--TABLA VENTA_WESTLAND 
GO
CREATE PROCEDURE SP_SEARCH_v_WESTLAND
@ID_VENTA VARCHAR(5)
AS
BEGIN
IF EXISTS (SELECT*FROM  VENTA_WESTLAND
WHERE ID_VENTA=@ID_VENTA)
BEGIN
SELECT*FROM  VENTA_WESTLAND WHERE ID_VENTA=@ID_VENTA
END
ELSE
BEGIN
	 PRINT('NO SE ENCONTRO REGISTRO');
	 END
END
EXEC SP_SEARCH_v_WESTLAND 'V00001'



  --TABLA VENTA_ALBROOK_PAPELERA
  GO
CREATE PROCEDURE SP_SEARCH_VENTA_ALBROOK
@ID_VENTA VARCHAR(5)
AS
BEGIN
IF EXISTS (SELECT*FROM  VENTA_ALBROOK_PAPELERA
WHERE ID_VENTA=@ID_VENTA)
BEGIN
SELECT*FROM  VENTA_ALBROOK_PAPELERA
WHERE ID_VENTA=@ID_VENTA
END
ELSE
BEGIN
	 PRINT('NO SE ENCONTRO REGISTRO');
	 END
END




--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--5. Procedimiento almacenado que me devuelva todos los registros de la tabla. /////////////////////////////////////////////////////////////////

--TABLA SUCURSAL
GO
CREATE PROCEDURE SP_SELECT_SUCURSAL
AS
SELECT*FROM SUCURSAL


-- TABLA EMPLEADO 
GO
CREATE PROCEDURE SP_SELECT_EMPLEADO
AS
SELECT*FROM EMPLEADO


--TABLA  CLIENTE
GO
CREATE PROCEDURE SP_SELECT_CLIENTE
AS
SELECT*FROM CLIENTE


--TABLA PROOVEDOR 
GO
CREATE PROCEDURE SP_SELECT_PROOVEDOR
AS
SELECT*FROM PROOVEDOR


--TABLA DEPARTAMENTO 
GO
CREATE PROCEDURE SP_SELECT_DEPARTAMENTO
AS
SELECT*FROM DEPARTAMENTO


--TABLA PRODUCTO_ALBROOK 
GO
CREATE PROCEDURE SP_SELECT_P_ALBROOK
AS
SELECT*FROM PRODUCTO_ALBROOK


  --TABLA PRODUCTO_WESTLAND 
  GO
CREATE PROCEDURE SP_SELECT_P_WESTLAND 
AS
SELECT*FROM PRODUCTO_WESTLAND


  --TABLA  VENTA_ALBROOK 
  GO
CREATE PROCEDURE SP_SELECT_v_ALBROOK
AS
SELECT*FROM VENTA_ALBROOK


--TABLA VENTA_WESTLAND 
GO
CREATE PROCEDURE SP_SELECT_v_WESTLAND
AS
SELECT*FROM VENTA_WESTLAND



  --TABLA VENTA_ALBROOK_PAPELERA
  GO
CREATE PROCEDURE SP_SELECT_VENTA_ALBROOKP
AS
SELECT*FROM DELETE_VENTA_ALBROOK





--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--6. 2 procedimientos almacenados por cada tabla que haga consultas de acuerdo a una funcionalidad de la
--aplicación o la lógica del negocio. (14)////////////////////////////////////////////////////////////////////////////////////////////////////

--TABLA  VENTA_ALBROOK 
GO
CREATE PROC RECORD_VENTA_A
AS
SELECT ID_EMPLEADO, ID_VENTA, ID_PRODUCTO, FECHA_VENTA, CANTIDAD FROM VENTA_ALBROOK
ORDER BY FECHA_VENTA DESC


GO
CREATE PROC RECORD_VENTA_EMPLEADO_A
AS
SELECT ID_EMPLEADO, ID_VENTA, FECHA_VENTA,NUM_FAC ,CANTIDAD  FROM VENTA_ALBROOK
ORDER BY CANTIDAD DESC




--TABLA VENTA_WESTLAND 
GO
CREATE PROC RECORD_VENTA_W
AS
SELECT ID_EMPLEADO, ID_VENTA, ID_PRODUCTO, FECHA_VENTA, CANTIDAD  FROM VENTA_WESTLAND
ORDER BY FECHA_VENTA DESC


GO
CREATE PROC RECORD_VENTA_EMPLEADO
AS
SELECT ID_EMPLEADO, ID_VENTA, FECHA_VENTA,NUM_FAC ,CANTIDAD  FROM VENTA_WESTLAND
ORDER BY CANTIDAD DESC




--TABLA VENTA_ALBROOK_PAPELERA
GO
CREATE PROC RECORD_VENTA_A_PAPELERA
AS
SELECT ID_EMPLEADO, ID_VENTA, ID_PRODUCTO, FECHA_VENTA, CANTIDAD  FROM VENTA_ALBROOK_PAPELERA
ORDER BY FECHA_VENTA DESC




-- TABLA SUCURSAL

-- (1) --
GO
CREATE PROCEDURE SP_SUC_CIUDAD
		@CIUDAD VARCHAR(25)
	AS
		BEGIN
			IF EXISTS(SELECT CIUDAD FROM SUCURSAL)
				BEGIN
					PRINT(CONCAT(CHAR(13), 'En la ciudad de ', dbo.UPPER_FIRST_LETTER(@CIUDAD), ' hay ', dbo.CANT_SUC_XCIUDAD(@CIUDAD), ' sucursales.'))
				END
			ELSE
				BEGIN
					PRINT(CONCAT('Actualmente la empresa no cuenta con sucursales en la ciudad de', @CIUDAD))
				END
		END
		-- Toma como parámetro una ciudad y de existir en la tabla SUCURSAL devuelve un mensaje con la cantidad de sucursales disponibles en esta

		-- Prueba:  
					--EXEC SP_SUC_CIUDAD 'PANAMÁ'

-- (2) --
GO
CREATE PROCEDURE SP_TELEFONO_SUCURSAL
	@NOMBRE_SUC VARCHAR(25)
AS
	BEGIN
		IF EXISTS(SELECT NOMBRE FROM SUCURSAL WHERE NOMBRE = @NOMBRE_SUC)
			BEGIN
				DECLARE @NUMBER VARCHAR(25)
				SET @NUMBER = (SELECT TELEFONO FROM SUCURSAL WHERE UPPER(NOMBRE) = @NOMBRE_SUC)
				PRINT(CONCAT('El número telefónico de la sucursal de ', dbo.UPPER_FIRST_LETTER(@NOMBRE_SUC), ' es: ', @NUMBER))
			END
	END
	-- Permite identificar el número telefónico de una sucursal a partir del nombre de la sucursal 

	-- Prueba:
				--EXEC SP_TELEFONO_SUCURSAL 'WESTLAND'




-- TABLA EMPLEADO

-- (1) --
GO
CREATE PROCEDURE SP_TIEMPO_CONTRATO
	@ID_EMPLEADO VARCHAR(20)
AS
	BEGIN
		DECLARE @NOMBRE VARCHAR(20), @APELLIDO VARCHAR(20)
		SET @NOMBRE = (SELECT NOMBRE FROM EMPLEADO WHERE ID_EMPLEADO = @ID_EMPLEADO)
		SET @APELLIDO = (SELECT APELLIDO FROM EMPLEADO WHERE ID_EMPLEADO = @ID_EMPLEADO)
		PRINT(CONCAT(CHAR(13), 'Al empleado ', @NOMBRE, ' ', @APELLIDO, ' con cédula ', @ID_EMPLEADO, ' le restan ', dbo.TIEMPO_CONTRATO(@ID_EMPLEADO), ' años de contrato'))
	END
	-- Permite identificar a través del id de un empleado los años de servicio y los que restan de contrato

	--Prueba: 
				--EXEC SP_TIEMPO_CONTRATO '2-760-873'


-- (2) --
GO
CREATE PROCEDURE SP_CONTACTO_EMPLEADO
	@ID_EMPLEADO VARCHAR(20)
AS
	BEGIN
		IF EXISTS(SELECT ID_EMPLEADO FROM EMPLEADO WHERE ID_EMPLEADO = @ID_EMPLEADO)
			BEGIN
				DECLARE @TELEFONO VARCHAR(15), @CORREO VARCHAR(30), @NOMBRE VARCHAR(20), @APELLIDO VARCHAR(25)
				SET @TELEFONO = (SELECT TELEFONO FROM EMPLEADO WHERE ID_EMPLEADO = @ID_EMPLEADO)
				SET @CORREO = (SELECT CORREO FROM EMPLEADO WHERE ID_EMPLEADO = @ID_EMPLEADO)
				SET @NOMBRE = (SELECT NOMBRE FROM EMPLEADO WHERE ID_EMPLEADO = @ID_EMPLEADO)
				SET @APELLIDO = (SELECT APELLIDO FROM EMPLEADO WHERE ID_EMPLEADO = @ID_EMPLEADO)

				PRINT(CONCAT(CHAR(13), 'La indentificación pertenece a: ', dbo.UPPER_FIRST_LETTER(@NOMBRE), ' ', dbo.UPPER_FIRST_LETTER(@APELLIDO), CHAR(13)))
				PRINT(CONCAT('Información de contacto:', CHAR(13)))
				PRINT(CONCAT('- Teléfono: ', @TELEFONO))
				PRINT(CONCAT('- Correo: ', @CORREO))
			END
		ELSE
			BEGIN
				PRINT('El id de empleado ingresado no está registrado')
			END
	END
	-- Recibe como parámetro el id que identifica a cada empleado y retorna la información de contacto del mismo

	-- Prueba:
				-- EXEC SP_CONTACTO_EMPLEADO '2-760-873'




-- TABLA CLIENTE

-- (1) --
GO
CREATE PROCEDURE SP_EDAD_PROMEDIO
	@NOMBRE_TABLA VARCHAR(20)
AS
	BEGIN
		IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = @NOMBRE_TABLA)
			BEGIN
				DECLARE @SQL NVARCHAR(MAX), @PROMEDIO FLOAT
				SET @SQL = '(SELECT AVG(YEAR(GETDATE()) - YEAR(FEC_NAC)) AS EDAD_PROMEDIO FROM ' + QUOTENAME(@NOMBRE_TABLA) + ')'
				EXEC sp_executesql @SQL
			END
	END
	-- Proporciona el promedio de edad entre los cliente

	-- Prueba 1: 
				-- EXEC SP_EDAD_PROMEDIO N'CLIENTE'


	-- Prueba 2: funciona tambien para la tabla empleado
				-- EXEC SP_EDAD_PROMEDIO N'EMPLEADO'





--=================================================================================================================================================

--============================================================== VISTAS ===========================================================================--

-- TABLA SUCURSAL

GO
CREATE VIEW VIEW_SUCURSAL WITH ENCRYPTION AS 
SELECT ID_SUCURSAL, NOMBRE, CIUDAD  FROM SUCURSAL


-- Prueba: 
--SELECT * FROM VIEW_SUCURSAL



-- TABLA DEPARTAMENTO
GO
CREATE VIEW VIEW_DEPARTAMENTO AS 
SELECT ID_DEPART, NOM_DEP FROM DEPARTAMENTO

-- Prueba: 
--SELECT * FROM VIEW_DEPARTAMENTO



-- TABLA EMPLEADO
GO
CREATE VIEW VIEW_EMPLEADO  AS 
SELECT ID_EMPLEADO, NOMBRE, APELLIDO, SEXO, FEC_NAC, TRABAJO, SALARIO, INI_CONTRATO, FIN_CONTRATO, ID_DEPART, ID_SUCURSAL FROM EMPLEADO

-- Prueba: 
--SELECT * FROM VIEW_EMPLEADO



-- TABLA CLIENTE
GO
CREATE VIEW VIEW_CLIENTE AS 
SELECT ID_CLIENTE, NOMBRE, APELLIDO, FEC_NAC FROM CLIENTE

-- Prueba: 
--SELECT * FROM VIEW_CLIENTE



-- TABLA PROOVEDOR
GO
CREATE VIEW VIEW_PROOVEDOR AS 
SELECT ID_PROOVEDOR, NOMBRE, DIRECCION FROM PROOVEDOR

-- Prueba: 
--SELECT * FROM VIEW_PROOVEDOR



-- TABLA PRODUCTO_ALBROOK
GO
CREATE VIEW VIEW_PRODUCTO_ALBROOK  AS 
SELECT ID_PRODUCTO, NOMBRE, MARCA, DESCRIPCION, PRECIO, CANTIDAD, ID_PROOVEDOR FROM PRODUCTO_ALBROOK

-- Prueba: 
--SELECT * FROM VIEW_PRODUCTO_ALBROOK



-- TABLA PRODUCTO_WESTLAND
GO
CREATE VIEW VIEW_PRODUCTO_WESTLAND AS 
SELECT ID_PRODUCTO, NOMBRE, MARCA, DESCRIPCION, PRECIO, CANTIDAD, ID_PROOVEDOR FROM PRODUCTO_ALBROOK

-- Prueba: 
--SELECT * FROM VIEW_PRODUCTO_WESTLAND



-- TABLA VENTA_ALBROOK
GO
CREATE VIEW VIEW_VENTA_ALBROOK  AS 
SELECT ID_VENTA, NUM_FAC, ID_CLIENTE, MET_PAGO, CANTIDAD, ID_EMPLEADO, ID_SUCURSAL, ID_PRODUCTO, FECHA_VENTA FROM VENTA_ALBROOK

-- Prueba: 
--SELECT * FROM VIEW_VENTA_ALBROOK



-- TABLA VENTA_WESTLAND
GO
CREATE VIEW VIEW_VENTA_WESTLAND AS 
SELECT ID_VENTA, NUM_FAC, ID_CLIENTE, MET_PAGO, CANTIDAD, ID_EMPLEADO, ID_SUCURSAL, ID_PRODUCTO, FECHA_VENTA FROM VENTA_WESTLAND

-- Prueba: 
--SELECT * FROM VIEW_VENTA_WESTLAND



-- TABLA CLIENTE_ELIMINADO
GO
CREATE VIEW VIEW_CLIENTE_ELIMINADO AS 
SELECT ID_CLIENTE, NOMBRE, APELLIDO, FEC_NAC, FECHA_ELIMINACION FROM CLIENTE_ELIMINADO

-- Prueba: 
--SELECT * FROM VIEW_CLIENTE_ELIMINADO



-- TABLA DELETE_VENTA_ALBROOK
GO
CREATE VIEW VIEW_DELETE_VENTA_ALBROOK AS 
SELECT ID_VENTA, NUM_FAC, ID_CLIENTE, MET_PAGO, CANTIDAD, ID_EMPLEADO, ID_SUCURSAL, ID_PRODUCTO, FECHA_VENTA, FECHA_REGISTRO FROM DELETE_VENTA_ALBROOK

-- Prueba: 
--SELECT * FROM VIEW_DELETE_VENTA_ALBROOK



-- TABLA INSERT_VENTA_ALBROOK
GO
CREATE VIEW VIEW_INSERT_VENTA_ALBROOK  AS 
SELECT ID_VENTA, NUM_FAC, ID_CLIENTE, MET_PAGO, CANTIDAD, ID_EMPLEADO, ID_SUCURSAL, ID_PRODUCTO, FECHA_VENTA, FECHA_REGISTRO FROM INSERT_VENTA_ALBROOK

-- Prueba: 
--SELECT * FROM VIEW_INSERT_VENTA_ALBROOK



-- TABLA UPDATE_VENTA_ALBROOK
GO
CREATE VIEW VIEW_UPDATE_VENTA_ALBROOK AS 
SELECT ID_VENTA, NUM_FAC, ID_CLIENTE, MET_PAGO, CANTIDAD, ID_EMPLEADO, ID_SUCURSAL, ID_PRODUCTO, FECHA_VENTA, FECHA_REGISTRO FROM UPDATE_VENTA_ALBROOK

-- Prueba: 
--SELECT * FROM VIEW_UPDATE_VENTA_ALBROOK






--===============================================================================================================================================

--================================================================== CURSORES ==================================================================--

GO
CREATE PROCEDURE SP_CURSOR_PROOVEDOR_RESPALDO
	@CONDITION INT
AS
	BEGIN
		--Declarar los variables
		DECLARE @ID_PROOVEDOR VARCHAR(5), @NOMBRE VARCHAR(25), 
		@TELEFONO VARCHAR(15), @CORREO VARCHAR(30), 
		@DIRECCION VARCHAR(100), @FECHA_REGISTRO DATETIME

		--Declarar el CURSOR
		DECLARE CURSOR_PROOVEDOR_RESPALDO CURSOR 
			FOR SELECT ID_PROOVEDOR, NOMBRE, TELEFONO, CORREO, DIRECCION FROM PROOVEDOR

		--Abrir el CURSOR
		OPEN CURSOR_PROOVEDOR_RESPALDO
			--Lee la primera fila de la consulta SELECT
			FETCH NEXT FROM CURSOR_PROOVEDOR_RESPALDO INTO @ID_PROOVEDOR, @NOMBRE, @TELEFONO, @CORREO, @DIRECCION

		-- Establece la condición para romper el bucle - cuando ya no haya más filas - suguiente fila = 0
		WHILE @@FETCH_STATUS = 0
			BEGIN
				-- operaciones a ejecutar
				INSERT INTO PROOVEDOR_RESPALDO(ID_PROOVEDOR, NOMBRE, TELEFONO, CORREO, DIRECCION, FECHA_REGISTRO)
				VALUES(@ID_PROOVEDOR, @NOMBRE, @TELEFONO, @CORREO, @DIRECCION, GETDATE())

				--Lee la fila siguiente de la consulta SELECT
				FETCH NEXT FROM CURSOR_PROOVEDOR_RESPALDO INTO @ID_PROOVEDOR, @NOMBRE, @TELEFONO, @CORREO, @DIRECCION
			END
	
		CLOSE CURSOR_PROOVEDOR_RESPALDO --Cerrar el CURSOR
		DEALLOCATE CURSOR_PROOVEDOR_RESPALDO--Liberar recursos
	END
	-- Cursor que a través de iteración guada los registros de la tabla PROOVEDOR en la tabla PROOVEDOR_RESPALDO

	-- Prueba: 
				--EXEC SP_CURSOR_PROOVEDOR_RESPALDO 0
	

	

